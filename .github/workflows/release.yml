---
name: "Release"
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Type of release version"
        required: true
        default: "minor"
        type: choice
        options:
          - "major"
          - "minor"
          - "patch"

jobs:
  create_new_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute new version
        id: compute_version
        run: |
          version=${{ github.event.inputs.version }}
          current_version=$(git tag --list | sort -t. -k1,1n -k2,2n -k3,3n | tail -1)
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          major=$(echo "$current_version" | cut -d"." -f1)
          minor=$(echo "$current_version" | cut -d"." -f2)
          patch=$(echo "$current_version" | cut -d"." -f3)
          if [ "$version" == "major" ]; then
            next_version="$((major+1)).0.0"
          elif [ "$version" == "minor" ]; then
            next_version="$major.$((minor+1)).0"
          else
            next_version="$major.$minor.$((patch+1))"
          fi
          echo "new_version=$next_version" >> $GITHUB_OUTPUT
          echo "New $version version: $next_version"
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate changelog
        run: make pre_release_${{ steps.compute_version.outputs.new_version }}
      - name: Update version
        run: sed -i "s/0.0.0/${{ steps.compute_version.outputs.new_version }}/" install_script.sh.template install_script_op_worker1.sh
      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Create detached commit and release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new=${{ steps.compute_version.outputs.new_version }}
          current=${{ steps.compute_version.outputs.current_version }}
          if [ -z "$current" ]; then
            body="$(cat CHANGELOG.rst)"
          else
            body="$(sed -n "/${new}/,/${current}/p" CHANGELOG.rst | tail -n +2 | head -n -1)"
          fi
          release_name="Release $new"
          git commit -am "${release_name}"
          git tag "$new"
          git push origin "$new"
          gh release create "$new" \
              --title="$new / $(date "+%Y-%m-%d")" \
              --notes="$body"
